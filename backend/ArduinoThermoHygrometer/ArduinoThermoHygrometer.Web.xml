<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ArduinoThermoHygrometer.Web</name>
    </assembly>
    <members>
        <member name="M:ArduinoThermoHygrometer.Web.Controllers.HealthcheckController.GetHealthCheckReport">
            <summary>
            Retrieves the health check report.
            </summary>
            <returns>The health report.</returns>
            <response code="200">Returns the health report.</response>
        </member>
        <member name="M:ArduinoThermoHygrometer.Web.Extensions.ProgramExtensions.AddHsts(Microsoft.AspNetCore.Builder.WebApplicationBuilder)">
            <summary>
            Adds HTTP Strict Transport Security (HSTS) service to the WebApplicationBuilder.
            </summary>
            <param name="builder">The WebApplicationBuilder instance.</param>
            <returns>The updated WebApplicationBuilder instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="builder"/> is null.</exception>
        </member>
        <member name="M:ArduinoThermoHygrometer.Web.Extensions.ProgramExtensions.AddHttpsRedirection(Microsoft.AspNetCore.Builder.WebApplicationBuilder)">
            <summary>
            Adds HTTP redirection service to the WebApplicationBuilder.
            </summary>
            <param name="builder">The WebApplicationBuilder instance.</param>
            <returns>The updated WebApplicationBuilder instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="builder"/> is null.</exception>
        </member>
        <member name="M:ArduinoThermoHygrometer.Web.Extensions.ProgramExtensions.AddRateLimiter(Microsoft.AspNetCore.Builder.WebApplicationBuilder)">
            <summary>
            Adds fixed window rate limiter service to the WebApplicationBuilder.
            </summary>
            <param name="builder">The WebApplicationBuilder instance.</param>
            <returns>The updated WebApplicationBuilder instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="builder"/> is null.</exception>
        </member>
        <member name="M:ArduinoThermoHygrometer.Web.Extensions.ProgramExtensions.AddApiVersioning(Microsoft.AspNetCore.Builder.WebApplicationBuilder)">
            <summary>
            Adds API versioning service to the WebApplicationBuilder.
            </summary>
            <param name="builder">The WebApplicationBuilder instance.</param>
            <returns>The updated WebApplicationBuilder instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="builder"/> is null.</exception>
        </member>
        <member name="M:ArduinoThermoHygrometer.Web.Extensions.ProgramExtensions.RegisterDatabaseAndRunMigrationsOnStartup``1(Microsoft.AspNetCore.Builder.WebApplicationBuilder)">
            <summary>
            Registers database and runs migrations on application startup.
            </summary>
            <typeparam name="T">The type of the DbContext.</typeparam>
            <param name="builder">The WebApplicationBuilder instance.</param>
            <returns>The updated WebApplicationBuilder instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="builder"/> is null.</exception>
            <exception cref="T:System.NotImplementedException">Thrown when the database connection string cannot be found.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when the database provider currently in use is not the SQL Server provider.</exception>
        </member>
        <member name="M:ArduinoThermoHygrometer.Web.Extensions.ProgramExtensions.RegisterDatabaseContext(Microsoft.AspNetCore.Builder.WebApplicationBuilder)">
            <summary>
            Registers the database context with the dependency injection container.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/> to configure.</param>
            <exception cref="T:System.NotImplementedException">Thrown when the database connection string is not found in the configuration.</exception>
        </member>
        <member name="M:ArduinoThermoHygrometer.Web.Extensions.ProgramExtensions.RunDatabaseMigrationsOnStartup(Microsoft.AspNetCore.Builder.WebApplicationBuilder)">
            <summary>
            Runs database migrations on application startup if configured to do so.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/> to configure.</param>
            <exception cref="T:System.NotSupportedException">Thrown when the database provider is not SQL Server.</exception>
        </member>
        <member name="M:ArduinoThermoHygrometer.Web.Extensions.ProgramExtensions.CreateProblemDetailsForRateLimiter(Microsoft.AspNetCore.RateLimiting.OnRejectedContext,System.String,System.String)">
            <summary>
            Creates a <see cref="T:Microsoft.AspNetCore.Mvc.ProblemDetails"/> instance for a rate limiter rejection.
            </summary>
            <param name="context">The context of the rejected request.</param>
            <param name="requestMethod">The HTTP method of the rejected request.</param>
            <param name="retryRequestAfter">The time in minutes after which the request can be retried.</param>
            <returns>A <see cref="T:Microsoft.AspNetCore.Mvc.ProblemDetails"/> instance containing details about the rate limit rejection.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Web.Extensions.ProgramExtensions.LoggerForRateLimiter(System.String,System.String,System.String)">
            <summary>
            Logs a warning message when a rate limit is reached.
            </summary>
            <param name="requestMethod">The HTTP method of the request that was rate limited.</param>
            <param name="requestPath">The path of the request that was rate limited.</param>
            <param name="retryRequestAfter">The time in minutes after which the request can be retried.</param>
        </member>
        <member name="M:ArduinoThermoHygrometer.Web.Mappers.BatteryMapper.GetBatteryFromBatteryDto(ArduinoThermoHygrometer.Web.DTOs.BatteryDto)">
            <summary>
            Converts a BatteryDto object to a Battery object.
            </summary>
            <param name="batteryDto">The BatteryDto object to convert.</param>
            <returns>The converted Battery object.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="batteryDto"/> is null.</exception>
        </member>
        <member name="M:ArduinoThermoHygrometer.Web.Mappers.BatteryMapper.GetBatteryDtoFromBattery(ArduinoThermoHygrometer.Domain.Entities.Battery)">
            <summary>
            Converts a Battery object to a BatteryDto object.
            </summary>
            <param name="battery">The Battery object to convert.</param>
            <returns>The converted BatteryDto object.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="battery"/> is null.</exception>
        </member>
        <member name="M:ArduinoThermoHygrometer.Web.Mappers.TemperatureMapper.GetTemperatureFromTemperatureDto(ArduinoThermoHygrometer.Web.DTOs.TemperatureDto)">
            <summary>
            Converts a TemperatureDto object to a Temperature object.
            </summary>
            <param name="temperatureDto">The TemperatureDto object to convert.</param>
            <returns>The converted Temperature object.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="temperatureDto"/> is null.</exception>
        </member>
        <member name="M:ArduinoThermoHygrometer.Web.Mappers.TemperatureMapper.GetTemperatureDtoFromTemperature(ArduinoThermoHygrometer.Domain.Entities.Temperature)">
            <summary>
            Converts a Temperature object to a TemperatureDto object.
            </summary>
            <param name="temperature">The Temperature object to convert.</param>
            <returns>The converted TemperatureDto object.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="temperature"/> is null.</exception>
        </member>
        <member name="M:ArduinoThermoHygrometer.Web.Middleware.ExceptionToProblemDetailsMiddleware.TryHandleAsync(Microsoft.AspNetCore.Http.HttpContext,System.Exception,System.Threading.CancellationToken)">
            <summary>
            Attempts to handle an exception by creating logs and writing a ProblemDetails response.
            </summary>
            <param name="httpContext">The current HttpContext.</param>
            <param name="exception">The exception that occurred.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>A ValueTask of bool indicating whether the exception was handled. Always returns true.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="exception"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="httpContext"/> is null.</exception>
        </member>
        <member name="M:ArduinoThermoHygrometer.Web.Middleware.ExceptionToProblemDetailsMiddleware.CreateProblemDetails(Microsoft.AspNetCore.Http.HttpContext,System.Exception,System.Int32)">
            <summary>
            Creates a <see cref="T:Microsoft.AspNetCore.Mvc.ProblemDetails"/> object that encapsulates information about an exception 
            that occurred during the handling of an HTTP request.
            </summary>
            <param name="httpContext">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> representing the current HTTP request.</param>
            <param name="exception">The <see cref="T:System.Exception"/> that was thrown during the handling of the HTTP request.</param>
            <param name="statusCode"></param>
            <returns>A <see cref="T:Microsoft.AspNetCore.Mvc.ProblemDetails"/> object containing detailed information about the exception and the context in which it occurred.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Web.Middleware.ExceptionToProblemDetailsMiddleware.GetProblemDetailsType(System.Exception)">
            <summary>
            Determines the appropriate Problem Details type URL based on the provided exception.
            </summary>
            <param name="exception">The exception for which to determine the Problem Details type.</param>
            <returns>A string representing the URL of the RFC 9110 section that corresponds to the type of exception.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Web.Middleware.ExceptionToProblemDetailsMiddleware.CreateLogsForExceptions(Microsoft.AspNetCore.Http.HttpContext,System.Exception)">
            <summary>
            Creates logs for exceptions.
            </summary>
            <param name="context">The HttpContext object.</param>
            <param name="exception">The exception that occurred.</param>
        </member>
        <member name="M:ArduinoThermoHygrometer.Web.Middleware.ExceptionToProblemDetailsMiddleware.GetRequestUriWithRequestMethod(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Gets the request URI with the request method from the provided HttpContext.
            </summary>
            <param name="httpContext">The HttpContext object.</param>
            <returns>The request URI with the request method.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Web.Middleware.ExceptionToProblemDetailsMiddleware.GetRequestUri(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Gets the request URI from the provided HttpContext.
            </summary>
            <param name="httpContext">The HttpContext object.</param>
            <returns>The request URI.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Web.Middleware.SecurityHeadersMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Invokes the middleware for security headers.
            </summary>
            <param name="httpContext">The HTTP context.</param>
            <returns>A task that represents the asynchronous middleware operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="httpContext"/> is null.</exception>
        </member>
        <member name="M:ArduinoThermoHygrometer.Web.OpenApi.ConfigureSwaggerGenOptions.Configure(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            Configures the SwaggerGenOptions for generating Swagger documentation.
            </summary>
            <param name="options">The SwaggerGenOptions to configure.</param>
        </member>
        <member name="M:ArduinoThermoHygrometer.Web.OpenApi.ConfigureSwaggerGenOptions.CreateOpenApiInfoForVersion(Asp.Versioning.ApiExplorer.ApiVersionDescription)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.OpenApi.Models.OpenApiInfo"/> for the specified <paramref name="apiDescription"/>.
            </summary>
            <param name="apiDescription">The <see cref="T:Asp.Versioning.ApiExplorer.ApiVersionDescription"/> object.</param>
            <returns>An instance of <see cref="T:Microsoft.OpenApi.Models.OpenApiInfo"/>.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Web.OpenApi.ConfigureSwaggerGenOptions.Configure(System.String,Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            Has to be implemented because of the interface.
            Calls the Configure method without the name parameter.
            </summary>
            <param name="name">The name of the options instance to configure.</param>
            <param name="options">The SwaggerGenOptions to configure.</param>
        </member>
        <member name="M:ArduinoThermoHygrometer.Web.Services.HealthcheckService.GetHealthcheckReport">
            <summary>
            Asynchronously retrieves a health check report.
            </summary>
            <returns>Returns the <see cref="T:Microsoft.Extensions.Diagnostics.HealthChecks.HealthReport"/> which provides the health check status.</returns>
        </member>
    </members>
</doc>
