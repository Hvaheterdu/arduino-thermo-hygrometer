<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ArduinoThermoHygrometer.Api</name>
    </assembly>
    <members>
        <member name="M:ArduinoThermoHygrometer.Api.Controllers.BatteryController.GetByIdAsync(System.Guid)">
            <summary>
            Retrieves a battery object by its id.
            </summary>
            <param name="id">The id of the battery object to retrieve.</param>
            <returns>Returns battery object or NotFound.</returns>
            <response code="200">Returns <c>Battery</c> object.</response>
            <response code="404">Returns <c>NotFound</c> if invalid id or the battery object is not found.</response>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Controllers.BatteryController.GetByTimestampAsync(System.DateTimeOffset)">
            <summary>
            Retrieves a battery object by its registration timestamp.
            </summary>
            <param name="timestamp">The timestamp of the battery object to retrieve.</param>
            <returns>Returns battery object or NotFound</returns>
            <response code="200">Returns <c>Battery</c> object.</response>
            <response code="404">Returns <c>NotFound</c> if invalid timestamp or the battery object is not found.</response>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Controllers.BatteryController.GetByDateAsync(System.DateTimeOffset)">
            <summary>
            Retrieves a list of battery objects by its date.
            </summary>
            <param name="date">The date of the battery objects to retrieve.</param>
            <returns>Returns battery objects or NotFound</returns>
            <response code="200">Returns a list of <c>Battery</c> objects.</response>
            <response code="404">Returns <c>NotFound</c> if invalid date or list of battery objects is empty.</response>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Controllers.BatteryController.CreateAsync(ArduinoThermoHygrometer.Domain.DTOs.BatteryDto)">
            <summary>
            Creates a battery object.
            </summary>
            <param name="batteryDto">The battery object to create.</param>
            <returns>Returns Created or BadRequest</returns>
            <response code="201">Returns <c>Created</c>.</response>
            <response code="400">Returns <c>BadRequest</c> if invalid batteryDto object.</response>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Controllers.BatteryController.DeleteByIdAsync(System.Guid)">
            <summary>
            Deletes a battery object by its id.
            </summary>
            <param name="id">The id of the battery object to delete.</param>
            <returns>Returns NoContent or NotFound.</returns>
            <response code="204">Returns <c>NoContent</c>.</response>
            <response code="404">Returns <c>NotFound</c> if invalid id or the battery object is not found.</response>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Controllers.BatteryController.DeleteByTimestampAsync(System.DateTimeOffset)">
            <summary>
            Deletes a battery object by its registration timestamp.
            </summary>
            <param name="timestamp">The timestamp of the battery object to delete.</param>
            <returns>Returns NoContent or NotFound</returns>
            <response code="204">Returns <c>NoContent</c>.</response>
            <response code="404">Returns <c>NotFound</c> if invalid timestamp or the battery object is not found.</response>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Controllers.HealthCheckController.GetHealthCheckReportAsync">
            <summary>
            Retrieves the healthcheck report for the system.
            </summary>
            <returns>The healthcheck report.</returns>
            <response code="200">Returns <c>HealthReport</c> if the system is healthy.</response>
            <response code="500">Returns <c>ProblemDetails</c> if the system is degraded or unhealthy.</response>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Controllers.HumidityController.GetByIdAsync(System.Guid)">
            <summary>
            Retrieves a humidity object by its id.
            </summary>
            <param name="id">The id of the humidity object to retrieve.</param>
            <returns>Returns humidity object or NotFound.</returns>
            <response code="200">Returns <c>Humidity</c> object.</response>
            <response code="404">Returns <c>NotFound</c> if invalid id or the humidity object is not found.</response>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Controllers.HumidityController.GetByTimestampAsync(System.DateTimeOffset)">
            <summary>
            Retrieves a humidity object by its registration timestamp.
            </summary>
            <param name="timestamp">The timestamp of the humidity object to retrieve.</param>
            <returns>Returns humidity object or NotFound</returns>
            <response code="200">Returns <c>Humidity</c> object.</response>
            <response code="404">Returns <c>NotFound</c> if invalid timestamp or the humidity object is not found.</response>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Controllers.HumidityController.GetByDateAsync(System.DateTimeOffset)">
            <summary>
            Retrieves a list of humidity objects by its date.
            </summary>
            <param name="date">The date of the humidity objects to retrieve.</param>
            <returns>Returns humidity objects or NotFound</returns>
            <response code="200">Returns a list of <c>Humidity</c> objects.</response>
            <response code="404">Returns <c>NotFound</c> if invalid date or list of humidity objects is empty.</response>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Controllers.HumidityController.CreateAsync(ArduinoThermoHygrometer.Domain.DTOs.HumidityDto)">
            <summary>
            Creates a humidity object.
            </summary>
            <param name="humidityDto">The humidity object to create.</param>
            <returns>Returns Created or BadRequest</returns>
            <response code="201">Returns <c>Created</c>.</response>
            <response code="400">Returns <c>BadRequest</c> if invalid humidityDto object.</response>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Controllers.HumidityController.DeleteByIdAsync(System.Guid)">
            <summary>
            Deletes a humidity object by its id.
            </summary>
            <param name="id">The id of the humidity object to delete.</param>
            <returns>Returns NoContent or NotFound.</returns>
            <response code="204">Returns <c>NoContent</c>.</response>
            <response code="404">Returns <c>NotFound</c> if invalid id or the humidity object is not found.</response>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Controllers.HumidityController.DeleteByTimestampAsync(System.DateTimeOffset)">
            <summary>
            Deletes a humidity object by its registration timestamp.
            </summary>
            <param name="timestamp">The timestamp of the humidity object to delete.</param>
            <returns>Returns NoContent or NotFound</returns>
            <response code="204">Returns <c>NoContent</c>.</response>
            <response code="404">Returns <c>NotFound</c> if invalid timestamp or the humidity object is not found.</response>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Controllers.TemperatureController.GetByIdAsync(System.Guid)">
            <summary>
            Retrieves a temperature object by its id.
            </summary>
            <param name="id">The id of the temperature object to retrieve.</param>
            <returns>Returns temperature object or NotFound.</returns>
            <response code="200">Returns <c>Temperature</c> object.</response>
            <response code="404">Returns <c>NotFound</c> if invalid id or the temperature object is not found.</response>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Controllers.TemperatureController.GetByTimestampAsync(System.DateTimeOffset)">
            <summary>
            Retrieves a temperature object by its registration timestamp.
            </summary>
            <param name="timestamp">The timestamp of the temperature object to retrieve.</param>
            <returns>Returns temperature object or NotFound</returns>
            <response code="200">Returns <c>Temperature</c> object.</response>
            <response code="404">Returns <c>NotFound</c> if invalid timestamp or the temperature object is not found.</response>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Controllers.TemperatureController.GetByDateAsync(System.DateTimeOffset)">
            <summary>
            Retrieves a list of temperature objects by its date.
            </summary>
            <param name="date">The date of the temperature objects to retrieve.</param>
            <returns>Returns temperature objects or NotFound</returns>
            <response code="200">Returns a list of <c>Temperature</c> objects.</response>
            <response code="404">Returns <c>NotFound</c> if invalid date or list of temperature objects is empty.</response>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Controllers.TemperatureController.CreateAsync(ArduinoThermoHygrometer.Domain.DTOs.TemperatureDto)">
            <summary>
            Creates a temperature object.
            </summary>
            <param name="temperatureDto">The temperature object to create.</param>
            <returns>Returns Created or BadRequest</returns>
            <response code="201">Returns <c>Created</c>.</response>
            <response code="400">Returns <c>BadRequest</c> if invalid temperatureDto object.</response>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Controllers.TemperatureController.DeleteByIdAsync(System.Guid)">
            <summary>
            Deletes a temperature object by its id.
            </summary>
            <param name="id">The id of the temperature object to delete.</param>
            <returns>Returns NoContent or NotFound.</returns>
            <response code="204">Returns <c>NoContent</c>.</response>
            <response code="404">Returns <c>NotFound</c> if invalid id or the temperature object is not found.</response>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Controllers.TemperatureController.DeleteByTimestampAsync(System.DateTimeOffset)">
            <summary>
            Deletes a temperature object by its registration timestamp.
            </summary>
            <param name="timestamp">The timestamp of the temperature object to delete.</param>
            <returns>Returns NoContent or NotFound</returns>
            <response code="204">Returns <c>NoContent</c>.</response>
            <response code="404">Returns <c>NotFound</c> if invalid timestamp or the temperature object is not found.</response>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Extensions.WebApplicationBuilderExtensions.AddHsts(Microsoft.AspNetCore.Builder.WebApplicationBuilder)">
            <summary>
            Adds HTTP Strict Transport Security (HSTS) service to the WebApplicationBuilder.
            </summary>
            <param name="builder">The WebApplicationBuilder instance.</param>
            <returns>The updated WebApplicationBuilder instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="builder"/> is null.</exception>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Extensions.WebApplicationBuilderExtensions.AddHttpsRedirection(Microsoft.AspNetCore.Builder.WebApplicationBuilder)">
            <summary>
            Adds HTTP redirection service to the WebApplicationBuilder.
            </summary>
            <param name="builder">The WebApplicationBuilder instance.</param>
            <returns>The updated WebApplicationBuilder instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="builder"/> is null.</exception>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Extensions.WebApplicationBuilderExtensions.AddRateLimiter(Microsoft.AspNetCore.Builder.WebApplicationBuilder)">
            <summary>
            Adds fixed window rate limiter service to the WebApplicationBuilder.
            </summary>
            <param name="builder">The WebApplicationBuilder instance.</param>
            <returns>The updated WebApplicationBuilder instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="builder"/> is null.</exception>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Extensions.WebApplicationBuilderExtensions.AddApiVersioning(Microsoft.AspNetCore.Builder.WebApplicationBuilder)">
            <summary>
            Adds API versioning service to the WebApplicationBuilder.
            </summary>
            <param name="builder">The WebApplicationBuilder instance.</param>
            <returns>The updated WebApplicationBuilder instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="builder"/> is null.</exception>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Extensions.WebApplicationBuilderExtensions.RegisterDatabaseAndRunMigrationsOnStartup``1(Microsoft.AspNetCore.Builder.WebApplicationBuilder)">
            <summary>
            Adds database to the WebApplicationBuilder and run migrations on startup.
            </summary>
            <typeparam name="T">The type of the DbContext.</typeparam>
            <param name="builder">The WebApplicationBuilder instance.</param>
            <returns>The updated WebApplicationBuilder instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="builder"/> is null.</exception>
            <exception cref="T:System.NotImplementedException">Thrown when the database connection string is not found.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when the database provider currently in use is not the SQL Server provider.</exception>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Extensions.WebApplicationBuilderExtensions.AddOpenTelemetryLogging(Microsoft.AspNetCore.Builder.WebApplicationBuilder)">
            <summary>
            Adds OpenTelemetry logging to the WebApplicationBuilder.
            </summary>
            <param name="builder">The WebApplicationBuilder instance.</param>
            <returns>The updated WebApplicationBuilder instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="builder"/> is null.</exception>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Extensions.WebApplicationBuilderExtensions.CreateProblemDetailsForRateLimiter(Microsoft.AspNetCore.RateLimiting.OnRejectedContext,System.String,System.String)">
            <summary>
            Creates a ProblemDetails instance for a rate limiter rejection.
            </summary>
            <param name="context">The context of the rejected request.</param>
            <param name="requestMethod">The HTTP method of the rejected request.</param>
            <param name="retryRequestAfter">The time in minutes after which the request can be retried.</param>
            <returns>A <see cref="T:Microsoft.AspNetCore.Mvc.ProblemDetails"/> instance containing details about the rate limit rejection.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Extensions.WebApplicationBuilderExtensions.LoggerForRateLimiter(System.String,System.String,System.String)">
            <summary>
            Logs a warning message when a rate limit is reached.
            </summary>
            <param name="requestMethod">The HTTP method of the request that was rate limited.</param>
            <param name="requestPath">The path of the request that was rate limited.</param>
            <param name="retryRequestAfter">The time in minutes after which the request can be retried.</param>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Middleware.GlobalExceptionHandlerMiddleware.TryHandleAsync(Microsoft.AspNetCore.Http.HttpContext,System.Exception,System.Threading.CancellationToken)">
            <summary>
            Attempts to handle an exception by creating logs and writing a ProblemDetails response.
            </summary>
            <param name="httpContext">The current HttpContext.</param>
            <param name="exception">The exception that occurred.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>A ValueTask of bool indicating whether the exception was handled. Always returns true.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="exception"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="httpContext"/> is null.</exception>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Middleware.SecurityHeadersMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Invokes the middleware for security headers.
            </summary>
            <param name="httpContext">The HTTP context.</param>
            <returns>A task that represents the asynchronous middleware operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="httpContext"/> is null.</exception>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.OpenApi.ConfigureSwaggerGenOptions.Configure(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            Configures the SwaggerGenOptions for generating Swagger documentation.
            </summary>
            <param name="options">The SwaggerGenOptions to configure.</param>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.OpenApi.ConfigureSwaggerGenOptions.CreateOpenApiInfoForVersion(Asp.Versioning.ApiExplorer.ApiVersionDescription)">
            <summary>
            Creates an instance of OpenApiInfo for the specified apiDescription.
            </summary>
            <param name="apiDescription">The <see cref="T:Asp.Versioning.ApiExplorer.ApiVersionDescription"/> object.</param>
            <returns>An instance of <see cref="T:Microsoft.OpenApi.Models.OpenApiInfo"/>.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.OpenApi.ConfigureSwaggerGenOptions.Configure(System.String,Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            Has to be implemented because of the interface.
            </summary>
            <param name="name">The name of the options instance to configure.</param>
            <param name="options">The SwaggerGenOptions to configure.</param>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Repositories.BatteryRepository.GetBatteryByIdAsync(System.Guid)">
            <summary>
            Retrieves a Battery object by its id asynchronously.
            </summary>
            <param name="id">The <see cref="T:System.Guid"/> of the object to retrieve.</param>
            <returns>Returns the <see cref="T:ArduinoThermoHygrometer.Domain.Entities.Battery"/> object if found; otherwise, null.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Repositories.BatteryRepository.GetBatteryByTimestampAsync(System.DateTimeOffset)">
            <summary>
            Retrieves a Battery object by its registered timestamp asynchronously.
            </summary>
            <param name="timestamp">The <see cref="T:System.DateTimeOffset"/> of the object to retrieve.</param>
            <returns>Returns the <see cref="T:ArduinoThermoHygrometer.Domain.Entities.Battery"/> object if found; otherwise, null.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Repositories.BatteryRepository.GetBatteriesByDateAsync(System.DateTimeOffset)">
            <summary>
            Retrieves a list of all Battery objects of a date.
            </summary>
            <param name="dateTimeOffset">The <see cref="T:System.DateTimeOffset"/> of the objects to retrieve.</param>
            <returns>Returns a list of <see cref="T:ArduinoThermoHygrometer.Domain.Entities.Battery"/> objects if non-empty list; otherwise, null.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Repositories.BatteryRepository.CreateBatteryAsync(ArduinoThermoHygrometer.Domain.Entities.Battery)">
            <summary>
            Creates a Battery object asynchronously.
            </summary>
            <param name="battery">The <see cref="T:ArduinoThermoHygrometer.Domain.Entities.Battery"/> object to create.</param>
            <returns>Returns the <see cref="T:ArduinoThermoHygrometer.Domain.Entities.Battery"/> object if created; otherwise, null.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Repositories.BatteryRepository.DeleteBatteryByIdAsync(System.Guid)">
            <summary>
            Deletes a Battery object by its id asynchronously.
            </summary>
            <param name="id">The <see cref="T:System.Guid"/> of the object to delete.</param>
            <returns>Returns the <see cref="T:ArduinoThermoHygrometer.Domain.Entities.Battery"/> object if deleted; otherwise, null.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Repositories.BatteryRepository.DeleteBatteryByTimestampAsync(System.DateTimeOffset)">
            <summary>
            Deletes a Battery object by its id asynchronously.
            </summary>
            <param name="timestamp">The <see cref="T:System.DateTimeOffset"/> of the object to delete.</param>
            <returns>Returns the <see cref="T:ArduinoThermoHygrometer.Domain.Entities.Battery"/> object if deleted; otherwise, null.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Repositories.BatteryRepository.SaveChangesAsync">
            <summary>
            Save all changes made in this context to the database.
            </summary>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Repositories.HumidityRepository.GetHumidityByIdAsync(System.Guid)">
            <summary>
            Retrieves a Humidity object by its id asynchronously.
            </summary>
            <param name="id">The <see cref="T:System.Guid"/> of the object to retrieve.</param>
            <returns>Returns the <see cref="T:ArduinoThermoHygrometer.Domain.Entities.Humidity"/> object if found; otherwise, null.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Repositories.HumidityRepository.GetHumidityByTimestampAsync(System.DateTimeOffset)">
            <summary>
            Retrieves a Humidity object by its registered timestamp asynchronously.
            </summary>
            <param name="timestamp">The <see cref="T:System.DateTimeOffset"/> of the object to retrieve.</param>
            <returns>Returns the <see cref="T:ArduinoThermoHygrometer.Domain.Entities.Humidity"/> object if found; otherwise, null.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Repositories.HumidityRepository.GetHumiditiesByDateAsync(System.DateTimeOffset)">
            <summary>
            Retrieves a list of all Humidity objects of a date.
            </summary>
            <param name="dateTimeOffset">The <see cref="T:System.DateTimeOffset"/> of the objects to retrieve.</param>
            <returns>Returns a list of <see cref="T:ArduinoThermoHygrometer.Domain.Entities.Humidity"/> objects if non-empty list; otherwise, null.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Repositories.HumidityRepository.CreateHumidityAsync(ArduinoThermoHygrometer.Domain.Entities.Humidity)">
            <summary>
            Creates a Humidity object asynchronously.
            </summary>
            <param name="humidity">The <see cref="T:ArduinoThermoHygrometer.Domain.Entities.Humidity"/> object to create.</param>
            <returns>Returns the <see cref="T:ArduinoThermoHygrometer.Domain.Entities.Humidity"/> object if created; otherwise, null.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Repositories.HumidityRepository.DeleteHumidityByIdAsync(System.Guid)">
            <summary>
            Deletes a Humidity object by its id asynchronously.
            </summary>
            <param name="id">The <see cref="T:System.Guid"/> of the object to delete.</param>
            <returns>Returns the <see cref="T:ArduinoThermoHygrometer.Domain.Entities.Humidity"/> object if deleted; otherwise, null.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Repositories.HumidityRepository.DeleteHumidityByTimestampAsync(System.DateTimeOffset)">
            <summary>
            Deletes a Humidity object by its id asynchronously.
            </summary>
            <param name="timestamp">The <see cref="T:System.DateTimeOffset"/> of the object to delete.</param>
            <returns>Returns the <see cref="T:ArduinoThermoHygrometer.Domain.Entities.Humidity"/> object if deleted; otherwise, null.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Repositories.HumidityRepository.SaveChangesAsync">
            <summary>
            Save all changes made in this context to the database.
            </summary>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Repositories.TemperatureRepository.GetTemperatureByIdAsync(System.Guid)">
            <summary>
            Retrieves a Temperature object by its id asynchronously.
            </summary>
            <param name="id">The <see cref="T:System.Guid"/> of the object to retrieve.</param>
            <returns>Returns the <see cref="T:ArduinoThermoHygrometer.Domain.Entities.Temperature"/> object if found; otherwise, null.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Repositories.TemperatureRepository.GetTemperatureByTimestampAsync(System.DateTimeOffset)">
            <summary>
            Retrieves a Temperature object by its registered timestamp asynchronously.
            </summary>
            <param name="timestamp">The <see cref="T:System.DateTimeOffset"/> of the object to retrieve.</param>
            <returns>Returns the <see cref="T:ArduinoThermoHygrometer.Domain.Entities.Temperature"/> object if found; otherwise, null.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Repositories.TemperatureRepository.GetTemperaturesByDateAsync(System.DateTimeOffset)">
            <summary>
            Retrieves a list of all Temperature objects of a date.
            </summary>
            <param name="dateTimeOffset">The <see cref="T:System.DateTimeOffset"/> of the objects to retrieve.</param>
            <returns>Returns a list of <see cref="T:ArduinoThermoHygrometer.Domain.Entities.Temperature"/> objects if non-empty list; otherwise, null.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Repositories.TemperatureRepository.CreateTemperatureAsync(ArduinoThermoHygrometer.Domain.Entities.Temperature)">
            <summary>
            Creates a Temperature object asynchronously.
            </summary>
            <param name="temperature">The <see cref="T:ArduinoThermoHygrometer.Domain.Entities.Temperature"/> object to create.</param>
            <returns>Returns the <see cref="T:ArduinoThermoHygrometer.Domain.Entities.Temperature"/> object if created; otherwise, null.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Repositories.TemperatureRepository.DeleteTemperatureByIdAsync(System.Guid)">
            <summary>
            Deletes a Temperature object by its id asynchronously.
            </summary>
            <param name="id">The <see cref="T:System.Guid"/> of the object to delete.</param>
            <returns>Returns the <see cref="T:ArduinoThermoHygrometer.Domain.Entities.Temperature"/> object if deleted; otherwise, null.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Repositories.TemperatureRepository.DeleteTemperatureByTimestampAsync(System.DateTimeOffset)">
            <summary>
            Deletes a Temperature object by its id asynchronously.
            </summary>
            <param name="timestamp">The <see cref="T:System.DateTimeOffset"/> of the object to delete.</param>
            <returns>Returns the <see cref="T:ArduinoThermoHygrometer.Domain.Entities.Temperature"/> object if deleted; otherwise, null.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Repositories.TemperatureRepository.SaveChangesAsync">
            <summary>
            Save all changes made in this context to the database.
            </summary>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Services.BatteryService.GetBatteryDtoByIdAsync(System.Guid)">
            <summary>
            Retrieves a BatteryDto object by its id asynchronously.
            </summary>
            <param name="id">The <see cref="T:System.Guid"/> of the object to retrieve.</param>
            <returns>Returns a <see cref="T:ArduinoThermoHygrometer.Domain.DTOs.BatteryDto"/> object if found; otherwise, null.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Services.BatteryService.GetBatteryDtoByTimestampAsync(System.DateTimeOffset)">
            <summary>
            Retrieves a BatteryDto object by its registered timestamp asynchronously.
            </summary>
            <param name="timestamp">The <see cref="T:System.DateTimeOffset"/> of the object to retrieve.</param>
            <returns>Returns a <see cref="T:ArduinoThermoHygrometer.Domain.DTOs.BatteryDto"/> object if found; otherwise, null.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Services.BatteryService.GetBatteryDtosByDateAsync(System.DateTimeOffset)">
            <summary>
            Retrieves a list of all BatteryDto objects of a date asynchronously.
            </summary>
            <param name="dateTimeOffset">The <see cref="T:System.DateTimeOffset"/> of the objects to retrieve.</param>
            <returns>Returns a list of <see cref="T:ArduinoThermoHygrometer.Domain.DTOs.BatteryDto"/> objects if non-empty list; otherwise, null.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Services.BatteryService.CreateBatteryDtoAsync(ArduinoThermoHygrometer.Domain.DTOs.BatteryDto)">
            <summary>
            Creates a BatteryDto object asynchronously.
            </summary>
            <param name="batteryDto">The <see cref="T:ArduinoThermoHygrometer.Domain.DTOs.BatteryDto"/> object to create.</param>
            <returns>Returns the <see cref="T:ArduinoThermoHygrometer.Domain.DTOs.BatteryDto"/> object if created; otherwise, null.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Services.BatteryService.DeleteBatteryDtoByIdAsync(System.Guid)">
            <summary>
            Deletes a BatteryDto object by its id asynchronously.
            </summary>
            <param name="id">The <see cref="T:System.Guid"/> of the object to delete.</param>
            <returns>Returns the <see cref="T:ArduinoThermoHygrometer.Domain.DTOs.BatteryDto"/> object if deleted; otherwise, null.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Services.BatteryService.DeleteBatteryDtoByTimestampAsync(System.DateTimeOffset)">
            <summary>
            Deletes a BatteryDto object by its registered timestamp asynchronously.
            </summary>
            <param name="timestamp">The <see cref="T:System.DateTimeOffset"/> of the object to delete.</param>
            <returns>Returns the <see cref="T:ArduinoThermoHygrometer.Domain.DTOs.BatteryDto"/> object if deleted; otherwise, null.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Services.HealthCheckServiceWrapper.GetHealthCheckReportAsync">
            <summary>
            Retrieves a healthcheck report asynchronously.
            </summary>
            <returns>Returns the <see cref="T:Microsoft.Extensions.Diagnostics.HealthChecks.HealthReport"/> which provides the healthcheck status.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Services.HumidityService.GetHumidityDtoByIdAsync(System.Guid)">
            <summary>
            Retrieves a HumidityDto object by its id asynchronously.
            </summary>
            <param name="id">The <see cref="T:System.Guid"/> of the object to retrieve.</param>
            <returns>Returns a <see cref="T:ArduinoThermoHygrometer.Domain.DTOs.HumidityDto"/> object if found; otherwise, null.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Services.HumidityService.GetHumidityDtoByTimestampAsync(System.DateTimeOffset)">
            <summary>
            Retrieves a HumidityDto object by its registered timestamp asynchronously.
            </summary>
            <param name="timestamp">The <see cref="T:System.DateTimeOffset"/> of the object to retrieve.</param>
            <returns>Returns a <see cref="T:ArduinoThermoHygrometer.Domain.DTOs.HumidityDto"/> object if found; otherwise, null.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Services.HumidityService.GetHumidityDtosByDateAsync(System.DateTimeOffset)">
            <summary>
            Retrieves a list of all HumidityDto objects of a date asynchronously.
            </summary>
            <param name="dateTimeOffset">The <see cref="T:System.DateTimeOffset"/> of the objects to retrieve.</param>
            <returns>Returns a list of <see cref="T:ArduinoThermoHygrometer.Domain.DTOs.HumidityDto"/> objects if non-empty list; otherwise, null.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Services.HumidityService.CreateHumidityDtoAsync(ArduinoThermoHygrometer.Domain.DTOs.HumidityDto)">
            <summary>
            Creates a HumidityDto object asynchronously.
            </summary>
            <param name="humidityDto">The <see cref="T:ArduinoThermoHygrometer.Domain.DTOs.HumidityDto"/> object to create.</param>
            <returns>Returns the <see cref="T:ArduinoThermoHygrometer.Domain.DTOs.HumidityDto"/> object if created; otherwise, null.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Services.HumidityService.DeleteHumidityDtoByIdAsync(System.Guid)">
            <summary>
            Deletes a HumidityDto object by its id asynchronously.
            </summary>
            <param name="id">The <see cref="T:System.Guid"/> of the object to delete.</param>
            <returns>Returns the <see cref="T:ArduinoThermoHygrometer.Domain.DTOs.HumidityDto"/> object if deleted; otherwise, null.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Services.HumidityService.DeleteHumidityDtoByTimestampAsync(System.DateTimeOffset)">
            <summary>
            Deletes a HumidityDto object by its registered timestamp asynchronously.
            </summary>
            <param name="timestamp">The <see cref="T:System.DateTimeOffset"/> of the object to delete.</param>
            <returns>Returns the <see cref="T:ArduinoThermoHygrometer.Domain.DTOs.HumidityDto"/> object if deleted; otherwise, null.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Services.TemperatureService.GetTemperatureDtoByIdAsync(System.Guid)">
            <summary>
            Retrieves a TemperatureDto object by its id asynchronously.
            </summary>
            <param name="id">The <see cref="T:System.Guid"/> of the object to retrieve.</param>
            <returns>Returns a <see cref="T:ArduinoThermoHygrometer.Domain.DTOs.TemperatureDto"/> object if found; otherwise, null.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Services.TemperatureService.GetTemperatureDtoByTimestampAsync(System.DateTimeOffset)">
            <summary>
            Retrieves a TemperatureDto object by its registered timestamp asynchronously.
            </summary>
            <param name="timestamp">The <see cref="T:System.DateTimeOffset"/> of the object to retrieve.</param>
            <returns>Returns a <see cref="T:ArduinoThermoHygrometer.Domain.DTOs.TemperatureDto"/> object if found; otherwise, null.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Services.TemperatureService.GetTemperatureDtosByDateAsync(System.DateTimeOffset)">
            <summary>
            Retrieves a list of all TemperatureDto objects of a date asynchronously.
            </summary>
            <param name="dateTimeOffset">The <see cref="T:System.DateTimeOffset"/> of the objects to retrieve.</param>
            <returns>Returns a list of <see cref="T:ArduinoThermoHygrometer.Domain.DTOs.TemperatureDto"/> objects if non-empty list; otherwise, null.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Services.TemperatureService.CreateTemperatureDtoAsync(ArduinoThermoHygrometer.Domain.DTOs.TemperatureDto)">
            <summary>
            Creates a TemperatureDto object asynchronously.
            </summary>
            <param name="temperatureDto">The <see cref="T:ArduinoThermoHygrometer.Domain.DTOs.TemperatureDto"/> object to create.</param>
            <returns>Returns the <see cref="T:ArduinoThermoHygrometer.Domain.DTOs.TemperatureDto"/> object if created; otherwise, null.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Services.TemperatureService.DeleteTemperatureDtoByIdAsync(System.Guid)">
            <summary>
            Deletes a TemperatureDto object by its id asynchronously.
            </summary>
            <param name="id">The <see cref="T:System.Guid"/> of the object to delete.</param>
            <returns>Returns the <see cref="T:ArduinoThermoHygrometer.Domain.DTOs.TemperatureDto"/> object if deleted; otherwise, null.</returns>
        </member>
        <member name="M:ArduinoThermoHygrometer.Api.Services.TemperatureService.DeleteTemperatureDtoByTimestampAsync(System.DateTimeOffset)">
            <summary>
            Deletes a TemperatureDto object by its registered timestamp asynchronously.
            </summary>
            <param name="timestamp">The <see cref="T:System.DateTimeOffset"/> of the object to delete.</param>
            <returns>Returns the <see cref="T:ArduinoThermoHygrometer.Domain.DTOs.TemperatureDto"/> object if deleted; otherwise, null.</returns>
        </member>
    </members>
</doc>
