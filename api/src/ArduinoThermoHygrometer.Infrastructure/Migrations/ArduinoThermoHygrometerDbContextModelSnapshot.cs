// <auto-generated />
using System;
using ArduinoThermoHygrometer.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArduinoThermoHygrometer.Infrastructure.Migrations
{
    [DbContext(typeof(ArduinoThermoHygrometerDbContext))]
    partial class ArduinoThermoHygrometerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArduinoThermoHygrometer.Domain.Entities.Battery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("BatteryStatus")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("RegisteredAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("RegisteredAt")
                        .IsUnique()
                        .IsDescending();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("RegisteredAt"));

                    b.ToTable("Batteries", null, t =>
                        {
                            t.HasCheckConstraint("CK_BatteryStatus_GreaterThanOrEqualToZero", "BatteryStatus >= 0");

                            t.HasCheckConstraint("CK_BatteryStatus_LessThanOrEqualToOneHundred", "BatteryStatus <= 100");
                        });
                });

            modelBuilder.Entity("ArduinoThermoHygrometer.Domain.Entities.Humidity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<decimal>("AirHumidity")
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal");

                    b.Property<DateTimeOffset>("RegisteredAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("RegisteredAt")
                        .IsUnique()
                        .IsDescending();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("RegisteredAt"));

                    b.ToTable("Humidities", null, t =>
                        {
                            t.HasCheckConstraint("CK_AirHumidity_GreaterThanOrEqualToTwenty", "AirHumidity >= 20");

                            t.HasCheckConstraint("CK_AirHumidity_LessThanOrEqualToNinety", "AirHumidity <= 90");
                        });
                });

            modelBuilder.Entity("ArduinoThermoHygrometer.Domain.Entities.Temperature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTimeOffset>("RegisteredAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<decimal>("Temp")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("RegisteredAt")
                        .IsUnique()
                        .IsDescending();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("RegisteredAt"));

                    b.ToTable("Temperatures", null, t =>
                        {
                            t.HasCheckConstraint("CK_Temp_GreaterThanOrEqualToNegativeFiftyFive", "Temp >= -55");

                            t.HasCheckConstraint("CK_Temp_LessThanOrEqualToOneHundredAndTwentyFive", "Temp <= 125");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
